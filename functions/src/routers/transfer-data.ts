const data = [
  {
    _id: { $oid: "5f695440b567fa4e0c85bf6e" },
    content:
      "### Spring Microservices\n* [github](https://github.com/jinyongnan810/spring-microservices)\n* [teacher github](https://github.com/in28minutes/spring-microservices)\n#### Preparations\n* jdk 1.8\n* intellij\n***\n#### [Spring Cloud Microservices](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices)\n* [examples](https://github.com/spring-cloud-samples/customers-stores)\n##### [limits service](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/limits-service)\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=limits-service&name=limits-service&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.limits-service&dependencies=web,devtools,actuator,cloud-config-client,cloud-eureka)\n* read [cloud config properties](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/limits-service/src/main/resources/bootstrap.properties)'s value in [java](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/limits-service/src/main/java/com/kin/springcloud/limitsservice/configuration/Configuration.java)\n\n##### [spring cloud configuration server](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/spring-cloud-config-server)\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=spring-cloud-config-server&name=spring-cloud-config-server&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.spring-cloud-config-server&dependencies=devtools,cloud-config-server)\n* [enable config server](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/spring-cloud-config-server/src/main/java/com/kin/springcloud/springcloudconfigserver/SpringCloudConfigServerApplication.java), create [git repo with properties](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/git-local-config-repo), [set git uri](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/spring-cloud-config-server/src/main/resources/application.properties). check out configuration from [server](http://localhost:8888/limits-service/default)\n* to refresh config values. use actuator refresh for each instance, or use actuator bus-refresh with [spring cloud bus amqp](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/spring-cloud-config-server/pom.xml)(need rabbit running)\n\n##### [currency exchange service](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/currency-exchange-service)\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=currency-exchange-service&name=currency-exchange-service&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.currency-exchange-service&dependencies=devtools,cloud-config-client,web,actuator,data-jpa,h2,cloud-eureka,cloud-starter-sleuth,cloud-starter-zipkin)\n* [get environment value](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-exchange-service/src/main/java/com/kin/springcloud/currencyexchangeservice/controller/CurrencyExchangeController.java)\n* [insert db](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-exchange-service/src/main/resources/data.sql) when server starts\n* jpa repository [create new interface](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-exchange-service/src/main/java/com/kin/springcloud/currencyexchangeservice/service/ExchangeValueRepository.java)(which get automatically implemented)\n* to run multiple server: at run configuration add VM param `-Dserver.port=8001`, also enable parallel running.\n\n##### [currency conversion service](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/currency-conversion-service)\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=currency-exchange-service&name=currency-exchange-service&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.currency-exchange-service&dependencies=devtools,cloud-config-client,web,actuator,data-jpa,h2,cloud-eureka,cloud-ribbon,cloud-starter-sleuth,cloud-starter-zipkin)\n* usage of [RestTemplate](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/controller/CurrencyConversionController.java)\n* flow of **OpenFeign**(rest request): [enable feign](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/CurrencyConversionServiceApplication.java), create [feign client](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/proxy/CurrencyExchangeServiceProxy.java), [use feign client](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/controller/CurrencyConversionController.java)\n* flow of **Ribbon**(local balancing): create [Ribbon client](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/proxy/CurrencyExchangeServiceProxy.java), set [url properties](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/resources/application.properties)(no need to set urls after ribbon and eureka are set)\n\n##### [eureka naming server](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/netflix-eureka-naming-server)\n* to keep notes of all instances of server components.\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=netflix-eureka-naming-server&name=netflix-eureka-naming-server&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.netflix-eureka-naming-server&dependencies=cloud-eureka-server,cloud-config-client,devtools,actuator)\n* flow of activating eureka naming server\n    * [enable eureka server](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/netflix-eureka-naming-server/src/main/java/com/kin/springcloud/netflixeurekanamingserver/NetflixEurekaNamingServerApplication.java)\n    * register conversion server to Euraka: [enable discovery client](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/CurrencyConversionServiceApplication.java), and [config eureka server ip](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/resources/application.properties)\n    * same registration to exchange server, and limits server\n    * to let Ribbon use Eureka's info instead of hard coding IPs , simply delete listOfServers configuration \n\n##### [Zuul API gateway server](https://github.com/jinyongnan810/spring-microservices/tree/master/springcloud-microservices/netflix-zuul-api-gateway-server)\n* [initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springcloud&artifactId=netflix-zuul-api-gateway-server&name=netflix-zuul-api-gateway-server&description=Demo%20project%20for%20Spring%20Could&packageName=com.kin.springcloud.netflix-zuul-api-gateway-server&dependencies=devtools,actuator,cloud-eureka,cloud-zuul,cloud-starter-sleuth,cloud-starter-zipkin)\n* [enable Zuul proxy](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/netflix-zuul-api-gateway-server/src/main/java/com/kin/springcloud/netflixzuulapigatewayserver/NetflixZuulApiGatewayServerApplication.java) and [creating a Zuul filter](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/netflix-zuul-api-gateway-server/src/main/java/com/kin/springcloud/netflixzuulapigatewayserver/ZuulLoggingFilter.java)\n* use the Zuul API gateway with url: http://localhost:8765/currency-exchange-service/currency-exchange/from/usd/to/jpy\n* [configure feign proxy](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/currency-conversion-service/src/main/java/com/kin/springcloud/currencyconversionservice/proxy/CurrencyExchangeServiceProxy.java) to route through Zuul\n\n##### Sleuth & Zipkin\n* use Sleath to apply a id to each request\n    * add dependency of cloud-starter-sleuth\n* use Zipkin to aggregate logs and track request \n    * [run a Zipkin server](https://zipkin.io/pages/quickstart.html) in docker \n    * add dependency of cloud-starter-zipkin\n\n##### Hystrix\n* [enable](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/limits-service/src/main/java/com/kin/springcloud/limitsservice/LimitsServiceApplication.java) and [use](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/limits-service/src/main/java/com/kin/springcloud/limitsservice/controller/LimitsConfigurationController.java) [Hystrix](https://github.com/jinyongnan810/spring-microservices/blob/master/springcloud-microservices/limits-service/pom.xml) to provide fallback solutions.\n\n***\n\n#### [Spring boot review](https://github.com/jinyongnan810/spring-microservices/tree/master/simple-springboot-demo)\n* create project with [Spring Initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.springboot.demo&artifactId=simple-springboot-demo&name=simple-springboot-demo&description=Demo%20project%20for%20Spring%20Boot&packageName=com.kin.springboot.demo.simple-springboot-demo&dependencies=web).\n* create [data format](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-springboot-demo/src/main/java/com/kin/springboot/demo/simplespringbootdemo/Book.java), add a [RestController](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-springboot-demo/src/main/java/com/kin/springboot/demo/simplespringbootdemo/BookController.java)\n* motitoring spring application with [actuator](https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready)\n* rebuild automatically with spring boot devtools, and check [intellij settings](https://stackoverflow.com/questions/33869606/intellij-15-springboot-devtools-livereload-not-working)\n***\n#### [Spring JPA demo](https://github.com/jinyongnan810/spring-microservices/tree/master/simple-jpa-demo/src/main/java/com/kin/jpa/demo/simplejpademo)\n*  create project with [Spring Initializr](https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.3.RELEASE&packaging=jar&jvmVersion=1.8&groupId=com.kin.jpa.demo&artifactId=simple-jpa-demo&name=simple-jpa-demo&description=Demo%20project%20for%20Spring%20Boot&packageName=com.kin.jpa.demo.simple-jpa-demo&dependencies=web,data-jpa,h2)\n* create [data format with annotations](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-jpa-demo/src/main/java/com/kin/jpa/demo/simplejpademo/entity/User.java)\n* create [service](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-jpa-demo/src/main/java/com/kin/jpa/demo/simplejpademo/service/UserDaoService.java) or [spring data repository](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-jpa-demo/src/main/java/com/kin/jpa/demo/simplejpademo/service/UserRepository.java) to manipulate object and save to database\n* create [controller](https://github.com/jinyongnan810/spring-microservices/blob/master/simple-jpa-demo/src/main/java/com/kin/jpa/demo/simplejpademo/controller/UserController.java) to expose manipulation\n* checkout h2 database with [console](https://www.baeldung.com/spring-boot-h2-database)\n***\n#### [Spring Boot Web Services Project](https://github.com/jinyongnan810/spring-microservices/tree/master/springboot-webservices)\n* [initializr](https://start.spring.io/)\n* create data format and controller like JPA demo\n* create [custom exceptions](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/exception/UserNotFoundException.java), [handling not found](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/controller/UserController.java), and [handling global exceptions](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/exception/GlobalExceptionHandler.java). [reference](https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc)\n* validation flow: [data](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/entity/User.java)->[controller](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/controller/UserController.java)->[globalHandler](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/exception/GlobalExceptionHandler.java)\n* server i18n flow: [add bean](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/SpringbootWebservicesApplication.java), [create message files](https://github.com/jinyongnan810/spring-microservices/tree/master/springboot-webservices/src/main/resources), set [base path](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/resources/application.properties), [use message](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/controller/UserController.java). (need to set global encoding to utf-8)\n* Swagger flow: [pom](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/pom.xml)->[SwaggerConfig](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/SwaggerConfig.java)->[data format](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/entity/User.java). get swagger [json](http://localhost:8080/v2/api-docs) or access [ui](http://localhost:8080/swagger-ui/)\n* [static filtering](https://github.com/jinyongnan810/spring-microservices/blob/master/springboot-webservices/src/main/java/com/kin/springboot/webservices/springbootwebservices/entity/User.java) and [dynamic filtering](https://www.udemy.com/course/microservices-with-spring-boot-and-spring-cloud/learn/lecture/8005676#questions)\n* [Versioning API](https://www.udemy.com/course/microservices-with-spring-boot-and-spring-cloud/learn/lecture/8005680#questions), options include uri/query/custom header/accept\n* [basic authentication](https://www.udemy.com/course/microservices-with-spring-boot-and-spring-cloud/learn/lecture/8005682#questions)\n* [Many to One relationship](https://github.com/jinyongnan810/spring-microservices/commit/8a5073a8cbcf1768b38cd06c5c2a4a70d132d206)",
    title: "Spring Cloud",
    createdAt: { $date: { $numberLong: "1600738368304" } },
    updatedAt: { $date: { $numberLong: "1600782107972" } },
    __v: { $numberInt: "0" },
    created_by: { $oid: "5f68046824763e24a0d69172" },
    updated_by: { $oid: "5f68046824763e24a0d69172" },
    user: { $oid: "5f6805b3ece6141bd853a1f7" },
  },
  {
    _id: { $oid: "5f69ff2b4dfe030017b00503" },
    title: "Review of CNNs",
    content:
      "### [Review CNNs](https://www.kaggle.com/jinyongnan/notebooks)\n#### Purpose\n* Get a hang of take image as input data\n* Review how the convolutions are done\n***\n#### [Cactus CNN](https://www.kaggle.com/jinyongnan/review-of-cactus-recognition-basic-cnn)\n##### Problem description\n* Learn a bunch of pictures to determine **whether there is** a cactus in the picture.\n##### Flow of solving this problem\n* **Import** csv data(columns: ID, has_cactus)\n* **Plot** the images and understand the data\n* Create **ImageDataGenerator** and combine with the imported csv\n* Create CNN **model** (Conv2Ds to get features and gradually shrink the feature image with MaxPooling2Ds, finally flatten and go through dense neurons)\n* **Compile** the model for binary results\n* Define **callbacks** of Early-Stopping and Model-Saving \n* **Fit** the model with generator(training and validating) and with callbacks\n* Generate test **results** with model and the generator(testing), and write results to csv\n##### Bonus findings\n* **Randomly pick** some of the items from a Series or an Array\n***\n#### [Scene Classification](https://www.kaggle.com/jinyongnan/basic-cnn-for-image-classification-categorical)\n##### Problem description\n* Take a scene picture to determine **which category it belongs**.\n##### Flow of solving this problem\n* List some of the pictures from each category and learn to categorize it\n* Create ImageDataGenerator and get hold of the images from each folder\n* Create a basic CNN model as above(but with some more layers)\n* Compile and fit the model\n* Predict a single picture or Predict a bunch of them (and make sense of its meaning)\n* List some of the predicted results and checkout by myself(result looks pretty nice^-^)",
    createdAt: { $date: { $numberLong: "1600782123977" } },
    updatedAt: { $date: { $numberLong: "1601037400093" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f69ff5b4dfe030017b00504" },
    title: "gRPC",
    content:
      "### gRPC\n[github](https://github.com/jinyongnan810/grpc-go)\n#### features\n* use http/2\n* ssl is built in\n* supports streaming\n* API oriented (and REST is Resource oriented)\n#### types of gRPC api\n* unary: one req : one res\n* server-streaming: one req : multiple res\n* client-streaming: multiple req : one res\n* by-streaming: multiple req : multiple res\n#### tips\n* [creating](https://github.com/jinyongnan810/grpc-go/blob/master/calculator/cal_server/server.go) and [handling](https://github.com/jinyongnan810/grpc-go/blob/master/calculator/cal_client/client.go) grpc **errors** (see SquareRoot function) \n* [check client cancelation](https://github.com/jinyongnan810/grpc-go/blob/master/calculator/cal_server/server.go) and [set server deadline](https://github.com/jinyongnan810/grpc-go/blob/master/calculator/cal_client/client.go) (see SquareRootWithDeadline function) \n* use openssl to [generate certs](https://github.com/jinyongnan810/grpc-go/tree/master/ssl), and use tls (see greet server and client boilerplate).\n* use [reflection](https://github.com/jinyongnan810/grpc-go/blob/master/greet/greet_server/server.go) to enable [cli(evans)](https://github.com/jinyongnan810/grpc-go/blob/master/README.md)\n* [show error location](https://github.com/jinyongnan810/grpc-go/blob/master/blog/blog_server/server.go)\n* [peacefully close server](https://github.com/jinyongnan810/grpc-go/blob/master/blog/blog_server/server.go)\n* [interact with mongodb](https://github.com/jinyongnan810/grpc-go/tree/master/blog)\n\n#### flow\n* create [protocol buffers](https://github.com/jinyongnan810/grpc-go/blob/master/greet/greetpb/greet.proto) (msg&service)\n* create server.go with [boilerplate](https://github.com/jinyongnan810/grpc-go/blob/master/greet/greet_server/server.go) and implement service function interface \n* create client.go with [boilerplate](https://github.com/jinyongnan810/grpc-go/tree/master/greet/greet_client), prepare data, and call service in the server\n\n#### next\n* grpc-gateway (grpc-rest)",
    createdAt: { $date: { $numberLong: "1600782171452" } },
    updatedAt: { $date: { $numberLong: "1600782198406" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f69ff8b4dfe030017b00505" },
    title: "MERN",
    content:
      '### Mongo Express React Node Project\n* [study](https://www.udemy.com/course/mern-stack-front-to-back/learn/lecture/10055128?start=15#overview)\n* [teacher](https://github.com/bradtraversy/devconnector_2.0)\n* [github](https://github.com/jinyongnan810/MERN)\n* [heroku](https://obscure-woodland-92690.herokuapp.com/)\n***\n#### flow of adding client functionalities\n* create types\n* create actions\n* create reducers\n* create rafcp, maybe connect to state or useState, connect action functions, and maybe useEffect\n* add url to App.js\n#### requirement\n* enable jsx emmet (vscode settings add)\n~~~~ json\n    "emmet.includeLanguages": {\n        "javascript": "javascriptreact"\n    }\n~~~~\n#### part 1: mongoose and routes base\n* [config](https://github.com/jinyongnan810/MERN/blob/master/config/default.json) to create global [accessible](https://github.com/jinyongnan810/MERN/blob/master/config/db.js) consts\n* [define routes](https://github.com/jinyongnan810/MERN/tree/master/routes/api) and [declare](https://github.com/jinyongnan810/MERN/blob/master/server.js)\n***\n#### part 2: authentication\n* [create data model](https://github.com/jinyongnan810/MERN/blob/master/models/User.js)\n* [parse data to json(using express.json())](https://github.com/jinyongnan810/MERN/blob/master/server.js)\n* validate with express-validator, check user existance, get user avatar, hash password , create user.[check post user](https://github.com/jinyongnan810/MERN/blob/master/routes/api/users.js)\n* [implementing jwt(JSON Web Token)](https://github.com/jinyongnan810/MERN/blob/master/routes/api/users.js)\n* [authentication middleware](https://github.com/jinyongnan810/MERN/blob/master/middleware/auth.js)\n* use of middleware, select user and exclude password, login user. [check auth router](https://github.com/jinyongnan810/MERN/blob/master/routes/api/auth.js)\n***\n#### part 3: profile\n* [create data model](https://github.com/jinyongnan810/MERN/blob/master/models/Profile.js)(<span style=\'color:skyblue\'>with ref, array, and cascade properties</span> )\n* populate found model, set fields and create/update db, path parameters, delete db, manipulate cascaded models, Object.assign, [Github oauth](https://github.com/settings/applications/1329051) (see[ profile route](https://github.com/jinyongnan810/MERN/blob/master/routes/api/profile.js))\n***\n#### part 4: post\n* [model](https://github.com/jinyongnan810/MERN/blob/master/models/Post.js) with liks&comments, and with abundant name&avatar\n* check user before remove db , check for invalid id error, sort, like/unlike a post, add/delete a comment. [check posts route](https://github.com/jinyongnan810/MERN/blob/master/routes/api/post.js)\n***\n#### part 5: React base\n* create react project, add [scripts](https://github.com/jinyongnan810/MERN/blob/master/package.json)\n~~~~ bash\nnpx create-react-app client\n~~~~\n* add proxy in the client [package.json]() to omit http://xxxip:xxxport/\n* frontend [routes](https://github.com/jinyongnan810/MERN/blob/master/client/src/App.js)\n* **use Link** instead of a tag\n* use of **[useState hook](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/auth/Register.js)**\n***\n#### part 6: Redux - Alerts\n* [redux store](https://github.com/jinyongnan810/MERN/blob/master/client/src/store.js)\n* [use of provider and store](https://github.com/jinyongnan810/MERN/blob/master/client/src/App.js)\n* [combine reducers](https://github.com/jinyongnan810/MERN/blob/master/client/src/reducers/index.js)\n* [Alert reducer](https://github.com/jinyongnan810/MERN/blob/master/client/src/reducers/alert.js)\n* [Alert actions](https://github.com/jinyongnan810/MERN/blob/master/client/src/actions/alert.js)\n* connecting [action function](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/auth/Register.js)/[state](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/layout/Alert.js) to the props, and using the action, and usage of propTypes.\n#### part7: Redux - Auth\n* [Auth Reducer](https://github.com/jinyongnan810/MERN/blob/master/client/src/reducers/auth.js)\n* [use action method from the other action](https://github.com/jinyongnan810/MERN/blob/master/client/src/actions/auth.js)\n* [axios set default header](https://github.com/jinyongnan810/MERN/blob/master/client/src/utils/setAuthToken.js)\n* [useEffect hook](https://github.com/jinyongnan810/MERN/blob/master/client/src/App.js)\n* [redirect](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/auth/Login.js)\n***\n#### part8: Redux - Dashboard\n* [Private Route](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/routing/PrivateRoute.js)\n* [set style in react component](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/layout/Spinner.js)\n* [use withRouter](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/profile/AddExperience.js) to get history, and [use history](https://github.com/jinyongnan810/MERN/blob/master/client/src/actions/profile.js) to redirect in actions.\n* [use Moment](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/dashboard/Experience.js) to deal with dates, and [pass properties](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/dashboard/Dashboard.js) from parent to child react component.\n***\n#### part9: Redux - Display Profile\n* [component get params from url](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/profile/Profile.js)\n* [noopener noreferrer](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/profile/ProfileTop.js)\n* [grid-template-areas & grid-area](https://github.com/jinyongnan810/MERN/blob/master/client/src/App.css)\n***\n#### part10: Redux - Posts\n* [defaultProps](https://github.com/jinyongnan810/MERN/blob/master/client/src/components/post/PostsItem.js)\n***\n#### part11: Deploy on Heroku\n* [download cli ](https://devcenter.heroku.com/articles/heroku-cli)\n* `heroku login`\n* change some files(production.json,package.json,server.json,.gitignore)\n* `heroku create`\n* `heroku git:remote -a obscure-woodland-92690`\n* `git push heroku master`\n* `heroku open`',
    createdAt: { $date: { $numberLong: "1600782219439" } },
    updatedAt: { $date: { $numberLong: "1600782245549" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f69ffca4dfe030017b00506" },
    title: "Protocol Buffers",
    content:
      "### Protocol Buffers\nThe next generation data format.\n* [Videos](https://www.udemy.com/course/protocol-buffers/)\n* [github](https://github.com/jinyongnan810/Protocol-Buffers)\n* [basic of protocol-buffers](https://github.com/jinyongnan810/Protocol-Buffers/tree/master/basics)\n* [java demo](https://github.com/jinyongnan810/Protocol-Buffers/tree/master/protobuf-java-demo) (used in idea)\n* [go demo](https://github.com/jinyongnan810/Protocol-Buffers/tree/master/protobuf-go-demo)\n* [python demo](https://github.com/jinyongnan810/Protocol-Buffers/tree/master/protobuf-python-demo)\n#### preparation\n* vscode: vscode-proto3 extension, and install clang-format\n* install protoc\n#### small tips\n* place frequent populated fields in<span style='color:skyblue'> tag 1-16</span>. (because tag takes only 1 byte)\n* every field, if not specified, gets its <span style='color:skyblue'>default value</span>.\n* <span style='color:skyblue'>sint32</span>/64 is preferable for negative values\n* <span style='color:skyblue'>oneof</span> to choose field to populate\n* <span style='color:skyblue'>map<string,Result></span> to store key-value pairs\n* [well known types](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf) including Timestamp\n#### compliling\n* `protoc -I=. --python_out=basics/python basics/*.proto` (-I: root dir, --python_out: out dir, last param: which proto to compile)\n#### evolution\n* add/rename fields don't matters much, but the default value must be taken care of\n* when remove fields, use `reserved 2`, `reserved first_name` to reserve tag&name",
    createdAt: { $date: { $numberLong: "1600782282303" } },
    updatedAt: { $date: { $numberLong: "1600782307299" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f69ffea4dfe030017b00507" },
    title: "Vanilla JS",
    content:
      "### Vanilla JS \n* [github](https://github.com/jinyongnan810/Vanilla-JS-20)   \n* [teacher](https://github.com/bradtraversy/vanillawebprojects)   \n* [udemy](https://www.udemy.com/course/web-projects-with-vanilla-javascript)\n* [jinyongnan810.github.io](https://jinyongnan810.github.io/Vanilla)\n***\n#### some memo about js/css/html\n* [icon generator](https://favicon.io/favicon-generator/)\n* make element unselectable\n~~~~ css\n.unselectable {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n~~~~\n* hide scrollbar\n~~~~ css\n.hide-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n.hide-scrollbar {\n  -ms-overflow-style: none;\n}\n~~~~\n***\n#### preparation\n* LiveServer(VSCode extension,use server to serve file instead filesystem)\n***\n#### project 1: [Form](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Form-Validator)\n* [fonts](https://fonts.google.com/) ('open sans'->select->Embed->copy import to .css) and [basic styles](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/style.css)\n~~~~css\n@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');\nbody {\n    font-family: 'Open Sans';\n}\n~~~~\n***\n#### project 2: [Ticket Booking](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Movie-Seat)\n* [css select](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Movie-Seat/style.css)\n* localStorage\n***\n#### project 3: [Video Player](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Video)\n* [video](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Video/script.js)\n* [range inpu](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Video/css/progress.css)t(from [css tricks](https://css-tricks.com/))\n* [font awesome](https://www.bootstrapcdn.com/fontawesome/)\n* [media selector](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Video/css/style.css)\n***\n#### project 4: [Exchange Rate Calculator](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Exchange-Rate-Calculator)\n* fetch [exchange api](https://exchangeratesapi.io/)\n***\n#### project 5: [dom manuplating](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Dom-Methods)\n* fetch [random user generator api](https://randomuser.me/)\n* [forEach,map,sort,filter,reduce](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Dom-Methods/script.js)\n* [aside main flex](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Dom-Methods/index.html)\n***\n#### project 6: [Landing Page](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Menu-Modal)\n* [side menu, modal](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Menu-Modal/style.css)(including **animation**)\n***\n#### project 7: [Hangman Game](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Hangman)\n* [SVG](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Hangman/index.html)\n* [popup, notification](https://github.com/bradtraversy/vanillawebprojects/blob/master/hangman/style.css)\n***\n#### project 8: [Meal Search](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Meal-Search)\n* fetch [theMealDB](https://www.themealdb.com/api.php)\n* [find child elements & data-attribute](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Meal-Search/script.js)\n* [display:grid](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Meal-Search/style.css)\n* [responde to different size](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Meal-Search/style.css)\n***\n#### project 9: [Expanse Tracker](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Exapanse-Tracker)\n* localStorage\n* [box-shadow](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Exapanse-Tracker/style.css)\n***\n#### project 10: [Music Player](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Music-Player)\n* [Audio API](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)\n* fetch [wangyiyun api](https://zhuanlan.zhihu.com/p/30246788),[demo](https://api.imjad.cn/cloudmusic/?type=song&id=28638902&userid=320236160).And some ways around referred error(using canplaythrough event & timeout).\n* [Promise.all()](https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop)\n* [Linear-gradient , animation running/pasued, calc](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Music-Player/style.css)\n* [offsetX/clientX](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Music-Player/script.js)\n***\n#### project 11: [Infinite Scroll Post](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Infinite-Scroll)\n* [loading animation](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Infinite-Scroll/style.css)\n* fetch [JSONPlaceholder](https://jsonplaceholder.typicode.com/)\n* [create element by html string](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Infinite-Scroll/script.js)\n* [scroll event(including clientHeight,scrollTop,scrollHeight)](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Infinite-Scroll/script.js)\n***\n#### project 12: [Typing Game](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Typing-Game)\n* fetch [Random Word API](https://random-word-api.herokuapp.com/home)\n* [await](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Typing-Game/script.js)\n***\n#### project 13: [Speech Text Reader](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Speech-Text-Reader)\n* [grid/media](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Speech-Text-Reader/style.css)\n* [web speech api](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API) 's [SpeechSynthesis](https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis)\n***\n#### project 14: [Memory Cards](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Memory-Cards)\n* [css](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Memory-Cards/style.css)\n* [font-awesome unicode](https://fontawesome.com/icons?d=gallery)\n***\n#### project 15: [Lyrics search](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Lyrics-Search)\n* [background image](https://unsplash.com/)\n* fetch [lyrics](https://api.lyrics.ovh/suggest/abc)\n* [deal with CORS ](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Lyrics-Search/script.js)\n***\n#### project 16: [Relaxer](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Relaxer)\n* [conic-gradient](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Relaxer/style.css)\n***\n#### project 17: [Breakout Game](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Breakout-Game)\n* [canvas](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Breakout-Game/script.js)\n***\n#### project 18: [New Year Countdown](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/NewYear-CountDown)\n* [date](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/NewYear-CountDown/script.js)\n***\n#### project 19: [Sortable List](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Sortable-List)\n* [fontawesome js](https://cdnjs.com/libraries/font-awesome)\n* [scramble array](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Sortable-List/script.js)\n* [css select all except the last one](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Sortable-List/style.css)\n* [drag and drop](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Sortable-List/script.js)\n***\n#### project 20: [Number Guessing Game](https://github.com/jinyongnan810/Vanilla-JS-20/tree/master/Number-Guessing-Game)\n* [SpeechRecognition API](https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition)\n* [choose speak voice & prevent speak error](https://github.com/jinyongnan810/Vanilla-JS-20/blob/master/Number-Guessing-Game/script.js)\n***\n#### project 21: [Mine Sweeper](https://github.com/jinyongnan810/jinyongnan810.github.io/tree/master/Vanilla/Mine-Sweeper)\n* right click\n* get query string\n***\n#### project 22: [Sass Demo](https://github.com/jinyongnan810/jinyongnan810.github.io/tree/master/Vanilla/Sass-Demo)\n* using live sass compiler extension\n* using variables\n* using [&xxx](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/style.scss) to omit parent name\n* separate scss files\n* [extend common styles](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/_buttons.scss)\n* [lighten or darken the color](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/_buttons.scss)\n* [get lightness of a color and change style with function](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/_config.scss)\n* [use mixin](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/_config.scss) to bundle same common style items and set values like functions\n* using [@each](https://github.com/jinyongnan810/jinyongnan810.github.io/blob/master/Vanilla/Sass-Demo/sass/_utilities.scss) to create similar style with loop",
    createdAt: { $date: { $numberLong: "1600782314914" } },
    updatedAt: { $date: { $numberLong: "1600782385531" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6a004f4dfe030017b00508" },
    title: "Bash",
    content:
      '### About Network  \n#### show network setting in gui\n~~~~ shell\nnmtui\n~~~~\n#### how to show port usage\n~~~~ shell\nnetstat -ltup # windows\nsudo lsof -i tcp:3000 # mac\nnetstat -vanp --tcp | grep 3000 # centos7\n~~~~\nand show proxy\n~~~~shell\nnetstat -n\n~~~~\n#### check ssh keys\n`vi ~/.ssh/known_hosts` or `ssh-keygen -r hostname`\n***\n### About Tools\n#### how to add remote and pull git repository\n```shell\nmkdir\ngit init\ngit remote add origin https://github.com/jinyongnan810/mymemo.git\ngit pull origin master\n```\n#### how to check a python script for syntax error\n`python -m py_compile script.py`\n\n#### how to check command records\n1. `ctrl+r`\n2. enter the keywords\n3. ctrl+r to search next\n\n#### how to make interactive shell\nhere is the demo code\n~~~~bash\nwhile true;do\n\tcat <<EOF\nsome options\n1. press 1 to...\n2. press 2 to..\nEOF\n\tread USER_ACTION\n\tcase ${USER_ACTION} in\n\t 1) \n\t  printf "user pressed 1"\n\t  pwd\n\t  read -p "confirm and continue.."\n\t  cd /usr/\n\t  ;;\n\t 2)\n\t  printf "user pressed 2"\n\t  ;;\n\t *)\n\t  printf "not available"\n\t  ;;\n\tesac\n\tdone\n~~~~\n#### how to edit file with sed\n~~~~bash\nsed -i -E s/"to-replace"/"replace-with"/g test.txt  # replace some text globally\nsed -i -E s/"to-delete"//g test.txt # delete some text globally\nsed -i "1d" test.txt # remove first line\nsed -i "1,100d" # remove first 100 line\nsed -i "$ d" test.txt # remove last line\n~~~~\n#### how to show and format date\n~~~~bash\ndate --date "2020/04/09 1 days" "+%Y%m%d"\n~~~~',
    createdAt: { $date: { $numberLong: "1600782415034" } },
    updatedAt: { $date: { $numberLong: "1600782435830" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6a007a4dfe030017b00509" },
    title: "Electron",
    content:
      '### Electron\nElectron can create app crossing windows, mac, and linux using js/css/html.\n\n#### links\n[electron site](https://www.electronjs.org/)  \nlearned from [udemy](https://www.udemy.com/course/electron-from-scratch/)  \nteacher\'s [github](https://github.com/bradtraversy/electron-course-files)  \n\n#### create the base\n~~~~bash\nnpm init # set entry point to main.js\nnpm i -D electron # set package.json -> script -> "start": "electron ."\nnpm start # first create main.js with simple "console.log(\'hello world\')"\n~~~~\n\n#### basic tools\n* `command + R` to reload  \n* `command + option + I` to show console  \n* `npm i -D nodemon` to auto reload (need to add `"dev": "nodemon --exec electron ."` to script)   \n\n#### tips\n* Menu items can be generate by role/type ,see [here](https://www.electronjs.org/docs/api/menu).   \n\n#### trouble shooting \n* when there is security warning\n~~~~html\n<meta http-equiv="Content-Security-Policy" content="script-src \'self\' \'unsafe-inline\'">\n~~~~\n\n### project 1:image shrink\n[github](https://github.com/jinyongnan810/electron-image-shrink)  \n#### using\n##### frontend\n* materialize,font-awesome (see github)\n##### ipcmain\n`npm i imagemin imagemin-mozjpeg imagemin-pngquant slash electron-log`\n* imagemin to shrink\n* slash to change linux slash to windows slash\n* electron-log to log\n\n### project2:systop\n[github](https://github.com/jinyongnan810/electron-systop)\n#### using\n##### frontend\n* hand-written css(<span style=\'color:skyblue\'>highly inspiring</span>)\n* html with tab\n* notification\n* localStorage  \n##### ipcmain\n* store configuration in a json file\n* tray\n* extends BrowserWindow\n\n### project3:bug logger\n[github](https://github.com/jinyongnan810/electron-bug-logger)\n#### using\n##### frontend\n* react (<span style=\'color:skyblue\'>with no redux</span>)\n* react-bootstrap\n* react-moment\n##### ipcmain\n* mongodb atlas (<span style=\'color:skyblue\'>mongoose</span>)',
    createdAt: { $date: { $numberLong: "1600782458003" } },
    updatedAt: { $date: { $numberLong: "1616543527206" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6a00ad4dfe030017b0050a" },
    title: "Echo",
    content:
      '### [echo guide](https://echo.labstack.com/guide)\n#### [demo code](https://github.com/jinyongnan810/go-echo)\n***\n#### environment\nWe can use [docker](https://hub.docker.com/_/golang).  \nRun at `docker run -it -p 13231:1323 -v C:\\Users\\xxx\\Documents\\go:/go/src/app golang`\n#### folder env\nfirst install [go](https://golang.org/dl/)  \nthen create folder `go-echo/src/main`  \nthen create main file `go-echo/src/main/main.go`  \nexport the GOPATH and install:    \n~~~~bash\nexport GOPATH=`pwd`\ngo install main # then the bin folder is created\nbin/main\n~~~~\n***\n#### hello world\nFirst get echo by `go get -u -v github.com/labstack/echo/...`   \nNext create a file *server.go*.  \n~~~~go\npackage main\n\nimport (\n\t"net/http"\n\t\n\t"github.com/labstack/echo"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET("/", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, "Hello, World!")\n\t})\n\te.Logger.Fatal(e.Start(":1323"))\n}\n~~~~\nFinally run with `go run server.go`.\n****\n#### routes\n##### crud routes\n~~~~go\ne.POST("/users", saveUser)\ne.GET("/users/:id", getUser)\ne.PUT("/users/:id", updateUser)\ne.DELETE("/users/:id", deleteUser)\n~~~~\n##### static routes\n~~~~go\ne.Static("/static", "static")\n~~~~\n***\n#### forms\n##### GET params \n~~~~go\ne.GET("/cats/:datatype", getCat)\nfunc getCat(c echo.Context) error {\n\tcatName := c.QueryParam("name")\n\tcatType := c.QueryParam("type")\n\tdataType := c.Param("datatype")\n\tif dataType == "string" {\n\t\treturn c.String(http.StatusOK, fmt.Sprintf("name:%s,type:%s", catName, catType))\n\t} else if dataType == "json" {\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t"name": catName,\n\t\t\t"type": catType,\n\t\t})\n\t}\n\treturn c.JSON(http.StatusBadRequest, map[string]string{\n\t\t"error": "datatype not specified",\n\t})\n}\n~~~~\n##### params in post data\n~~~~go\n// e.POST("/save", save)\nfunc save(c echo.Context) error {\n\t// Get name and email\n\tname := c.FormValue("name")\n\temail := c.FormValue("email")\n\treturn c.String(http.StatusOK, "name:" + name + ", email:" + email)\n}\n~~~~\n##### upload files\n~~~~go\nfunc save(c echo.Context) error {\n\t// Get name\n\tname := c.FormValue("name")\n\t// Get avatar\n  \tavatar, err := c.FormFile("avatar")\n  \tif err != nil {\n \t\treturn err\n \t}\n \n \t// Source\n \tsrc, err := avatar.Open()\n \tif err != nil {\n \t\treturn err\n \t}\n \tdefer src.Close()\n \n \t// Destination\n \tdst, err := os.Create(avatar.Filename)\n \tif err != nil {\n \t\treturn err\n \t}\n \tdefer dst.Close()\n \n \t// Copy\n \tif _, err = io.Copy(dst, src); err != nil {\n  \t\treturn err\n  \t}\n\n\treturn c.HTML(http.StatusOK, "<b>Thank you! " + name + "</b>")\n}\n~~~~\n##### bind json\n~~~~go\n// Cat : the cat\ntype Cat struct {\n\tName string `json:"name"`\n\tType string `json:"type"`\n}\nfunc addCat(c echo.Context) error {//fastest\n\tcat := Cat{}\n\tdefer c.Request().Body.Close()\n\tb, err := ioutil.ReadAll(c.Request().Body)//import "io/ioutil"\n\tif err != nil {\n\t\tlog.Printf("error is :%s", err)\n\t\treturn c.String(http.StatusInternalServerError, "")\n\t}\n\terr = json.Unmarshal(b, &cat)\n\tif err != nil {\n\t\tlog.Printf("error is :%s", err)\n\t\treturn c.String(http.StatusInternalServerError, "")\n\t}\n\treturn c.JSON(http.StatusOK, cat)\n}\nfunc addCat2(c echo.Context) error {//almost as fast,preferrable\n\tcat := Cat{}\n\tdefer c.Request().Body.Close()\n\terr := json.NewDecoder(c.Request().Body).Decode(&cat)\n\tif err != nil {\n\t\tlog.Printf("error is :%s", err)\n\t\treturn echo.NewHTTPError(http.StatusInternalServerError)\n\t}\n\treturn c.JSON(http.StatusOK, cat)\n}\nfunc addCat3(c echo.Context) error {//slower than the other two\n\tcat := Cat{}\n\terr := c.Bind(&cat)\n\tif err != nil {\n\t\tlog.Printf("error is :%s", err)\n\t\treturn echo.NewHTTPError(http.StatusInternalServerError)\n\t}\n\treturn c.JSON(http.StatusOK, cat)\n}\n~~~~\n***\n#### middlewares\n~~~~go\n// import "github.com/labstack/echo/middleware"\ne := echo.New()\ng := e.Group("/admin")\ng.Use(middleware.Logger())\ng.GET("/main", adminMain)\n~~~~\n##### logger\n~~~~go \ne := echo.New()\ng := e.Group("/admin")\nf, err := os.Create("test.log") // import "os"\nif err != nil {\n\tlog.Printf("error:%s", err)\n}\ndefer f.Close()\ng.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n\tFormat: `[${time_rfc3339}] ${status} ${method} ${host}${path} ${latency_human}` + "\\n",\n\tOutput: f,\n}))\ng.GET("/main", adminMain)\n~~~~\n##### basic authentication\n~~~~go\ng.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\tif username == "kin" && password == "jinyongnan" {\n\t\treturn true, nil\n\t}\n\treturn false, errors.New("failed")\n}))\n~~~~\n##### custom middleware\n~~~~go\n// ServerHeader add header to all responses\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderServer, "server kin")\n\t\treturn next(c)\n\t}\n}\n~~~~\n***\n#### cookies\n##### set cookie with\n~~~~go\ncookie := new(http.Cookie)\ncookie.Name = "SessionID"\ncookie.Value = "some hash"\ncookie.Expires = time.Now().Add(2 * time.Hour)\nc.SetCookie(cookie)\n~~~~\n##### check cookie with \n~~~~go\n// CheckLogin check user login\nfunc CheckLogin(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tcookie, err := c.Cookie("SessionID")\n\t\tif err == nil && cookie != nil && cookie.Value == "some hash" {\n\t\t\treturn next(c)\n\t\t}\n\t\treturn c.Redirect(http.StatusMovedPermanently, fmt.Sprintf("/login?redirect=%s", c.Path()))\n\t}\n}\n~~~~\n***\n#### little bit of jwt\n##### create token with\n~~~~go\n// JWTClaims create jwt token\ntype JWTClaims struct {\n\tName string `json:"name"`\n\tjwt.StandardClaims\n}\nfunc createJWTToken() (string, error) {//import jwt "github.com/dgrijalva/jwt-go"\n\tclaims := JWTClaims{\n\t\t"test",\n\t\tjwt.StandardClaims{\n\t\t\tId:        "user_id",\n\t\t\tExpiresAt: time.Now().Add(2 * time.Hour).Unix(),\n\t\t},\n\t}\n\trawToken := jwt.NewWithClaims(jwt.SigningMethodHS512, claims)\n\ttoken, err := rawToken.SignedString([]byte("secret"))\n\tif err != nil {\n\t\treturn "", err\n\t}\n\treturn token, err\n}\n~~~~\nThen return the token to user.\n##### set jwt middleware\n~~~~go\ne.GET("/jwt", jwtPage, middleware.JWTWithConfig(middleware.JWTConfig{\n\tSigningMethod: "HS512",\n\tSigningKey:    []byte("secret"),\n\tTokenLookup:   "cookie:JWTCookie",//to read from cookies, to use this, we should write cookie when user signed in. \n}))\n~~~~\n##### when user gets this token\nAdd Authorization Header `Bearer theToken`\n##### when server get requests with the token\n~~~~go\nfunc jwtPage(c echo.Context) error {\n\tuser := c.Get("user")\n\ttoken := user.(*jwt.Token)\n\tclaims := token.Claims.(jwt.MapClaims)\n\n\tlog.Println("username:", claims["name"], ",user id:", claims["jti"], ",raw token:", token.Raw)\n\treturn c.String(http.StatusOK, "hello,this is jwt page.")\n}\n~~~~\n***',
    createdAt: { $date: { $numberLong: "1600782509664" } },
    updatedAt: { $date: { $numberLong: "1600782533129" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6a00df4dfe030017b0050b" },
    title: "Go",
    content:
      '### The very basics\n#### Hello world\n~~~~go\npackage main\n\t\nimport (\n\t"fmt"\n\t"time"\n\t"math"\n\t"math/rand"\n)\nconst name = "go"\nfunc add(a int,b int) int {\n\treturn a+b\n}\nfunc swap(a ,b int) (reta int,retb int){\n\treta = b\n\tretb = a\n\treturn\n}\nfunc main() {\n\tfmt.Println("hello world,",name)\n\n\tfmt.Println("the time is:",time.Now())\n\n\trandomNumber := rand.Float64()// := to raplace var,can be used outside the function\n\tfmt.Println("My favorite number is", randomNumber,",and the square of it is ",math.Sqrt(randomNumber))\n\n\tfmt.Println("add 1+2=",add(1,2))\n\treta,retb := swap(2,3)\n\tfmt.Println("swap 2,3 = ",reta,retb)\n\n\tvar theValue int // the usage of var 1\n\ttheValue = 10\n\tfmt.Println("var theValue is ",theValue)\n\t\n\tvar val1,val2,val3 = true,1,"abc" // the usage of var 2\n\tfmt.Println(val1,val2,val3)\n\t\n\t// the fors\n\tfor i:=0;i<3;i++{\n\t\ttheValue++\n\t}\n\tfmt.Println("var theValue is ",theValue)\n\tfor theValue<20{ // eternal loop is "for {"\n\t\ttheValue++\n\t}\n\tfmt.Println("var theValue is ",theValue)\n\n\t// the ifs\n\tif theValue+=2;theValue<30{// it can perform a command before go to conditions\n\t\ttheValue++\n\t} else {\n\t\ttheValue--\n\t} \n\n\tfmt.Println("var theValue is ",theValue)\n}\n~~~~\n***\n#### some basic syntax about function control\n* `if`,`for`,`switch` has no parenthses.\n* `if`,`switch` can use a syntax like `if dosomething;condition`\n* `switch`\'s cases can be some command or function,like `case a+1:`.This function is not evaluated when the case before it get hit.\n* `switch` can also have no parameters, then everything is decided by individual cases.\n* All function is Capitalized. And also all the exported variables.\n* `defer` can delay the execution of the function until all the others finishes.eg:`defer fmt.Println(\'hello world\')`.Note that multiple defer will be stacked.\n* pointer is the same with c\n***\n#### basics about struct\n* struct\'s syntax:\n~~~~go\ntype Vertex struct {\n\tX int\n\tY int\n}\nfunc main() {\n\tv := Vertex{1, 2}\n\tp := &v\n\tp.X = 1e9\n\tfmt.Println(v)\n}\n~~~~\n* **Go does not have class**, and a struct own a method by the following.(a type except struct can also have method by the same way, eg.float , and event a pointer)\n~~~~go\npackage main\nimport (\n\t"fmt"\n\t"math"\n)\ntype Vertex struct {\n\tX, Y float64\n}\nfunc (v Vertex) Abs() float64 {\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\nfunc main() {\n\tv := Vertex{3, 4}\n\tfmt.Println(v.Abs())\n}\n~~~~\n***\n#### about strings\n* usually deal with the package "strings", APIs list in [here](https://golang.org/pkg/strings/#Fields).\n* split works like this:`splits := strings.Split(s," ")` \n***\n#### about closure\n* check this\n~~~~go\nfunc fibonacci() func() int {\n\ta := 1\n\tb := 1\n\treturn func() int{\n\t\tsum := a+b\n\t\ta = b\n\t\tb = sum\n\t\treturn sum\n\t}\n}\n~~~~\n****\n#### basics about slice\n* array looks like this `primes := [6]int{2, 3, 5, 7, 11, 13}`. Its length can\'t be changed. The slice is more often used, it\'s like `var s []int = primes[1:4]` and it\'s length can be changed. The slice is the reference (not copy) of array. Fortunately , the slice can be used like this.\n~~~~go\ns := []struct {\n\ti int\n\tb bool\n}{\n\t{2, true},\n\t{3, false},\n\t{5, true},\n\t{7, true},\n\t{11, false},\n\t{13, true},\n}\n~~~~\n* A slice with `len(s)==0 && cap(s)==0` is `nil`.\n* Another way to create a slice:`a := make([]int, 5)`, more on [this page](https://tour.golang.org/moretypes/13).\n* A slice can be appended by `s = append(s,\'abc\')`, and a item in the slice can be deleted by `a = append(a[:i], a[i+1:]...)` .\n* Looping slice is something like `for i, v := range s {}`.\n* create a 2 dimensional slice\n~~~~\na := make([][]uint8, dy)\nfor i := 0; i < dy; i++ {\n\ta[i] = make([]uint8, dx)\n}\n~~~~\n*** \n#### basics about map\n* map is used someway like this:\n~~~~go\nm := make(map[string]int)\nm["Bell Labs"] =3\nfmt.Println(m["Bell Labs"])\ndelete(m,"Bell Labs")\nv,ok := m["Bell Labs"]// also check if the key exists\n~~~~',
    createdAt: { $date: { $numberLong: "1600782559999" } },
    updatedAt: { $date: { $numberLong: "1600782572715" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6a01104dfe030017b0050c" },
    title: "Interesting Ideas",
    content:
      "### Some Interesting Ideas & Projects\n***\n### Recent Todos\n- [ ] GraphQL\n- [ ] OAuth\n- [ ] Redux-Saga\n- [x] cloudinary\n- [ ] flutter\n***\n### Using Cloudinary\n* [Front-end](https://github.com/jinyongnan810/mymemo-2-frontend/blob/8349263e42c6e7d8501f6953436f14c2ae6ff50f/src/components/layout/FileUploader.js)\n* [Back-end](https://github.com/jinyongnan810/mymemo-2/blob/master/api/memo/controllers/upload.js)\n![ghibli1](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1609504285/bfymbxi1xez9bvs0clav.jpg)\n***\n### Using [NASA API](https://api.nasa.gov/) to create a [Wild-fire tracker](https://github.com/jinyongnan810/small-react-projects/tree/master/wildfire-tracker)\n* Also using iconify to get icons, google-map-react to show maps.\n***\n### [Strapi](https://strapi.io/)\n* Point: We can create a CMS project right **out-of-box**.\n* [Crash Course](https://www.youtube.com/watch?v=6FnwAbd2SDY)\n***\n### [Tailwind CSS](https://tailwindcss.com/)\n* Point: **Utility-First** CSS framework.\n* [Crash Course](https://www.youtube.com/watch?v=UBOj6rqRUME)\n***\n### [Socket.io](https://socket.io/get-started/chat/)\n* Point: Socket.io is **like**(but not) [a wrapper](https://socket.io/docs/) for WebSocket and seems very easy to use.\n* Difference with [WebRTC](https://webrtc.org/): WebRTC(also uses WebSocket) is mainly used deliver streaming data.\n***\n### [loading.io](https://loading.io/)\n* Point: They provide dynamic icons. And some are free.\n***\n### [CodeMirror](https://codemirror.net/)\n* Point: It can highlight textarea.\n*** \n### Serverless development\n* Point: Function as service.\n* [Demo](https://kentcdodds.com/blog/super-simple-start-to-serverless)\n*** \n### [React-Admin](https://github.com/marmelab/react-admin)\n* Point: Fast frontend CMS admin page\n* [Crash Course](https://www.youtube.com/watch?v=HRmdj-HpJyE)\n",
    createdAt: { $date: { $numberLong: "1600782608612" } },
    updatedAt: { $date: { $numberLong: "1609504296026" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f6aa75c5fbb4a00177113b7" },
    title: "About this page",
    content:
      "### [Kin's Page](https://y-kin.com/)\n* [Backend](https://github.com/jinyongnan810/mymemo-2): Strapi deployed on [Heroku](https://kins-memo.herokuapp.com/)\n* [Frontend](https://github.com/jinyongnan810/mymemo-2-frontend): React deployed on [Netlify](https://friendly-sinoussi-bb023c.netlify.app/)\n* DB: using Mongodb Atlas\n* Domain: rent from NameCheap\n### Pros and Cons\n* Backend uses Strapi and take no effort to create apis\n* Deployment is completely free and easy\n* Perfect for personal use\n* Heroku goes to sleep when there are no accesses in an hour, which make it less public friendly.",
    createdAt: { $date: { $numberLong: "1600825180459" } },
    updatedAt: { $date: { $numberLong: "1600863200795" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f741a80d4571c00172801ae" },
    title: "Review of GANs",
    content:
      "## Review of GANs\n### [Basic AutoEncoder](https://www.kaggle.com/jinyongnan/review-of-autoencoder-denoising-mnist-images?scriptVersionId=43741350) for denoising MNIST images\n#### Flow of AutoEncoder\n* Create the encoder with image input, Conv2D(with stride 2), flatten and dense to a latent space.\n* Create the decoder with latent input, dense, reshape, and Conv2DTranspose to a image.\n* Combine the encoder and the decoder to a autoencoder model.\n#### Special technique used\n* Create noisy images\n#### Summary\n* The purpose of encoder may be to get the features of the image, and the decoder is to generate image from the features. Obiviously more complicated images needs more length of latent array.\n* In my opinion, this kind of AutoEncoder might have some limits. It depends hugely on the latent, and latent may not sufficiently represent all the information to re-generate the the whole denoised image. Maybe link the encoder's conv layer to decoder's ConvTranspose layer is a good idea.\n***\n\n\n### [CycleGAN](https://www.kaggle.com/jinyongnan/review-of-cyclegan/notebook)\n#### Problem description\n* CycleGAN can solve something like turn horse to zebra and also vice versa.\n\n\n#### Flow of CycleGAN\n* Create AtoB model\n    * Create AtoB Generator(image in, image out)\n    * Create B Discriminator(image in, patch-format judgement out)\n* Create BtoA model\n    * Create BtoA Generator\n    * Create A Discriminator\n* Create AtoB composite model(real_A & real_B images in, 4 outputs(see below))\n    * Using AtoB Generator,B Discriminator,BtoA Generator\n* Create BtoA composite model\n    * Using BtoA Generator,A Discriminator,AtoB Generator\n\n\n#### The Training process of CycleGAN\n* There are real images for each category, and fake images generated by the Generators.\n\n* First we train the composite model, which composites AtoBGenerateor(the only one that can be trained), BDiscriminator, BtoAGenerator.In this part, for each category, we get 4 outputs:\n    * (1) **AtoBGenerateor** generates B images by real A images, which are judged by **BDiscriminator**, which outputs the **patched judgements**. This is the most import Part of CycleGAN, and its punished by mse(the other 3 are mae)\n    * (2) **AtoBGenerateor** generates **B images** by real B images, which are compared by the same real B images. This make sense because Generator generates target category images that are very difference from the originals, then it obiviously doesn't know its category very well\n    * (3) **BtoAGenerator** takes the same generated B images in (1) and generate A images. And the **generated A images** are compared to the original A images. This makes sense in some way. Because suppose BtoAGenerator is not bad, then if AtoBGenerateor does a good job, then the generated B images can be reverted to almost the same with the original A images.\n    * (4) **BtoAGenerator** generates A images by the real B images, which reversed by **AtoBGenerateor** and outputs are **generated B images**, which compared with original B images. This also suppose BtoAGenerator is not bad, and prove AtoBGenerateor can also reverse the generated B images.\n\n* Then we train the discriminators:\n    * Train discriminators with fake(generated) images of its category\n    * Train discriminators with original images of its category\n\n#### Some CycleGAN's features\n* Unlike Pix2Pix GAN, CycleGAN doesn't need any images to have its counter part.\n* CycleGAN has 2 pairs of GAN models, each support other GAN model in training process.\n ",
    createdAt: { $date: { $numberLong: "1601444480747" } },
    updatedAt: { $date: { $numberLong: "1601734344556" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f7d7e9b8dc7090017ffe857" },
    title: "Interesting Tricks",
    content:
      '## Interesting Tricks\n\n***\n### Front-end env variables\n* [Ref](https://trekinbami.medium.com/using-environment-variables-in-react-6b0a99d83cf5)\n* [Mine](https://github.com/jinyongnan810/electron-react-typescript-demo/commit/e2dec83ad7b6c34d6ce83216803c670dc71990da)\n\n\n***\n### bootstrap5 li checked style\n```sass\n.alert-success {\n  ul {\n    list-style: none;\n    margin: 0;\n  }\n  li::before {\n    content: "✓  ";\n  }\n}\n``` \n\n***\n### bootstrap5 button no outline\n```sass\nbutton:focus,\nbutton:active {\n  outline: none !important;\n  box-shadow: none !important;\n}\n```\n\n*** \n### find all files in the directory and subdirectories\n```bash\nfind . -printf \'%Tc %p\\n\'\n```\n\n***\n### setInterval for python\n```python\nimport threading\nclass RepeatTimer(threading.Timer):\n    def run(self):\n        while not self.finished.wait(self.interval):\n            self.function(*self.args, **self.kwargs)\n            sys.stdout.flush()\nt = RepeatTimer(1, printStatus)\nt.start()\n```\n\n***\n### Set timeout for async functions\n``` javascript\nconst setWithTimeout = (client, timeout) => {\n  return Promise.race([\n    client.set("foo", "bar"),\n    new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error("timeout"));\n      }, timeout);\n    }),\n  ]);\n};\n```\n\n***\n### Docker rm all container\n```bash\nfor /F %c in (\'docker ps -a -q\') do (docker rm %c) # windows\nfor /F %c in (\'docker images -a -q\') do (docker image rm -f %c) # windows \ndocker rm `docker ps --no-trunc -aq` # linux\n```\n\n\n***\n### export data from browser\n```javascript\nfunction downloadObjectAsJson(exportObj, exportName) {\n  var dataStr =\n    "data:text/json;charset=utf-8," +\n    encodeURIComponent(JSON.stringify(exportObj));\n  var el = document.createElement("a");\n  el.setAttribute("href", dataStr);\n  el.setAttribute("download", exportName + ".json");\n  document.body.appendChild(el);\n  el.click();\n  el.remove();\n}\n```\n\n***\n### [CMDer](https://cmder.net/)\n* Windows version of bash shell\n* Run this in the cmd\n```bash\nCmder.exe /REGISTER ALL\n```\n\n***\n### Regex\n#### Split a paragraph to sentences without deleting delimeters\n~~~~ javascript\n"Hello! Today is a beautiful day. How are you?I\'m fine.".split(/(?<=[。.｡!?！？])/g).map(x=>x.trim())\n~~~~\n#### Check out Regex online\n[Regular Expressions 101](https://regex101.com/r/vS1fI7/1)\n***\n\n### Command Alias\n#### [Set windows cmd alias](https://winaero.com/how-to-set-aliases-for-the-command-prompt-in-windows/)\n* Create a file "aliases.cmd" with\n~~~~ bash\n@echo off\ndoskey ls=dir /p $*\ndoskey k=kubectl $*\n~~~~\n* Right click cmd.exe -> properties\n* Set target to something like `%windir%\\system32\\cmd.exe /k "C:\\cmd\\aliases.cmd"`\n\n***\n### Fix Windows Home Docker-desktop\n``` bash\nnetsh winsock reset\n```\n\n***\n### Self hosted certificates\n```bash\n# 1.create CA\nopenssl genrsa -des3 -out myCA.key 2048\nopenssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n\n# 2.install CA to every device\n# on linux\nmkdir /usr/local/share/ca-certificates/extra\ncp myCA.pem /usr/local/share/ca-certificates/extra/root.cert.crt\nupdate-ca-certificates\n# on windows\n# open cert manager, Trusted Root Certification->Certification->import(myCA.pem)\n\n# 3.use CA to create server certificates\nopenssl genrsa -out nginx.key 2048\nopenssl req -new -key nginx.key -out nginx.csr\n# create nginx.ext with\n# ---------------------------------\n# authorityKeyIdentifier=keyid,issuer\n# basicConstraints=CA:FALSE\n# keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\n# subjectAltName = DNS:nginx, DNS:localhost, DNS:127.0.0.1\n# ---------------------------------\nopenssl x509 -req -in nginx.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial -out nginx.crt -days 825 -sha256 -extfile nginx.ext\n```\n\n',
    createdAt: { $date: { $numberLong: "1602059931653" } },
    updatedAt: { $date: { $numberLong: "1618290343317" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f8a5d32462360001764fad2" },
    title: "Review of Regressions",
    content:
      "## Review of Regression methods\n### [Lasso](https://machinelearningmastery.com/lasso-regression-with-python/)\n#### Point\n* Lasso uses L1 Regularization to shrink coefficients of less contributive parameters.\n* It can lower some parameters' coefficients to 0, thus providing automatic feature selections.(Lasso prefers sparse parameter and coefs)\n#### [Demo](https://www.kaggle.com/jinyongnan/regression-method-of-lasso)\n* Fill NAN values with medians\n* RepeatedKFold to get valid training\n* GridSearchCV to get optimized alpha",
    createdAt: { $date: { $numberLong: "1602903346377" } },
    updatedAt: { $date: { $numberLong: "1602925759155" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "5f9cb7b0d5bbf70017710e9d" },
    title: "JS MicroServices",
    content:
      "## JavaScript MicroServices\n* [Course](https://www.udemy.com/course/microservices-with-node-js-and-react/)\n***\n### The Core of this course\n#### Two different ways of implementing microservices\n##### Monolith way(Synchronous way)\n* You call a service, this service will fetch another bunch of services to get what you need.\n##### Event-motivated way(Asynchronous way)\n* You call a service, you get all you want in this service.\n#### Pros and Cons\n* Simplicity:  Sync way is a lot easier to understand than the Async way.\n* Dependency:  Sync way depends totally on the other services, and Async way does not.\n* Speed:       Sync way's speed depends on the slowest of the depending services, and Async way depend on itself.\n* Redundancy:  Sync way's service can not function after its depending service fails, and Async way functions as long as itself running.\n* Maintenance: Sync way has a dependency web, and it's hard to maintain. Async way has no care for other service's interfaces.\n* Data:        Sync way has no data duplication, and the other one has much data duplication.\n***\n\n### Project 1: Blog\n#### Purpose\n* Create a simple project to get a hold of basic problems and how event-bus works\n#### Steps\n* A normal way of monolith project as a [beginner](https://github.com/jinyongnan810/js-microservices-blog/commit/d30944540118cd18d8c0484819b8bc1a57a7a28c).\n* Convert the monolith way to the [event-driven way](https://github.com/jinyongnan810/js-microservices-blog/commit/bfc1eb31c0fc68bf7d6c6fee41960342ddd0e4e4) \n* Add moderation. [How to change data in microservices](https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/19099098#overview).([Implementation](https://github.com/jinyongnan810/js-microservices-blog/commit/cf8a0dbda9d0e1b2743f9f1cc32d491ec5319367))\n* [Sync events](https://github.com/jinyongnan810/js-microservices-blog/commit/9581298c2e9ebe65e398e99b4e8ddaa640b60d94)\n* [Dockerize](https://github.com/jinyongnan810/js-microservices-blog/commit/5e98622a045c1dce83fb5ce59b704daa80744e75)\n* Kubernetesing\n    * [Manipulating single pod](https://github.com/jinyongnan810/js-microservices-blog/commit/ea82c2592073f9ccac6a84c40cf6d4b40013f589)\n    * [Using Deployment](https://github.com/jinyongnan810/js-microservices-blog/commit/d228a6001e87349db36b4ce939fbe1f6654c6280)\n    * Using Service\n    * [NodePort](https://github.com/jinyongnan810/js-microservices-blog/commit/5acea66f30a6e1ee4220a36be0b6584ee14ee763) to expose ports\n    * Using [ClusterIp](https://github.com/jinyongnan810/js-microservices-blog/commit/22129c6b3172cbf1eee5096278cf7864c22ff7d5) to connect all services\n    * Using [Nginx-Ingress](https://github.com/jinyongnan810/js-microservices-blog/commit/dc39386fbed4c8bbdccc2219610e21d94ba36507) to connect React app to backend services\n    * Using [Skaffolds](https://github.com/jinyongnan810/js-microservices-blog/commit/e7fd43163acba4cc9ced6fd570b6fceb55b34431) to auto-deploy the k8s environment (in production)\n***\n\n\n### Project 2: Ticketing\n#### Purpose\n* Create a site that user can sell and buy tickets.\n\n#### Step 1: [Start-up setup](https://github.com/jinyongnan810/js-microservices-ticketing/commit/da6fa4763593d3e25aeb2df678b2c48f091c8227)\n\n#### Step 2: Deploying on Google Cloud\n* Create a Project\n* Kubernetes Engine -> Clusters -> Create Cluster(choose region) -> pool -> nodes(choose N1 g1 small)\n* [Install GC SDK](https://cloud.google.com/sdk/docs/quickstart)\n``` bash\ngcloud auth login\ngcloud init\ngcloud components install kubectl\ngcloud container clusters get-credentials ticketing-com\n```\n* Enable Cloud Build API \n* [Change Skaffold file](https://github.com/jinyongnan810/js-microservices-ticketing/commit/f30b9947169a78bfedde84aaa7943eb7806342e3)\n* Configure Ingress Nginx\n``` bash\nkubectl create clusterrolebinding cluster-admin --clusterrole=cluster-admin --user=yuunan.kin@gmail.com\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.40.2/deploy/static/provider/cloud/deploy.yaml\n```\n* Networking -> Network Services -> Load Balancing -> get IP\n* Edit host file\n* Start Skaffold\n``` bash\ngcloud auth application-default login \nskaffold dev\n```\n\n#### Step 3: [Handling Errors](https://github.com/jinyongnan810/js-microservices-ticketing/commit/12531d20e82236f4d7f2e8dc6b69a99c968b86f8)\n##### Purpose of this step\n* Establish a common way to handle errors\n* Handle errors with universal format among microservices\n##### Error Handling summary\n* Create a abstract class to define error format\n* Extend the class above to be used in specific cases\n* Create a middleware to handle all errors throwed and return the common error format\n\n#### Step 4: Authentication\n##### Flows\n* [Setup mongo db](https://github.com/jinyongnan810/js-microservices-ticketing/commit/aa28373cf965b815ae164bc9634d9d94ecd42876)\n* [Create User model and set hash password](https://github.com/jinyongnan810/js-microservices-ticketing/commit/d4e567efc48d04f42e59a438f7619a5caffc23f2)\n* Create [jwt token](https://github.com/jinyongnan810/js-microservices-ticketing/commit/b3f2299b219151e9666b96b80254cc11e9792a04), and save it to cookies.(so that auth info can be require at the first of the requests)\n* [Save jwt secret in k8s](https://github.com/jinyongnan810/js-microservices-ticketing/commit/fe1445cf15a87b6ad96932864a1a4117574a624d)\n``` bash\nkubectl create secret generic jwt-secret --from-literal=JWT_KEY=secret\nkubectl get secrets\n```\n* Adjust [return object properties](https://github.com/jinyongnan810/js-microservices-ticketing/commit/80cfbd8a39b8a0caa9b665cf6db939eae0924e3e)\n* [Create Validation middleware and sign in](https://github.com/jinyongnan810/js-microservices-ticketing/commit/57577eb76838293334b642fb74c6db1c847b3e6d), [get current user](https://github.com/jinyongnan810/js-microservices-ticketing/commit/8d8c149fbd33e064a6860acc8c98dc555e5a303b), [sign out](https://github.com/jinyongnan810/js-microservices-ticketing/commit/1a8db17094d1b1320af3bf5836ae870d7917ae1c)\n* Create [get current user middleware and require login middleware](https://github.com/jinyongnan810/js-microservices-ticketing/commit/7ccf3f1bc268ccedbbbf75d9f5ab1c2d014c59c5)\n\n#### Step 5: Unit Test\n##### Flows\n* [Refactoring](https://github.com/jinyongnan810/js-microservices-ticketing/commit/0ca89fed52cc4620e9d850726c34a08e8b0a2b96) the express app\n* Add dependencies(jest,supertest,mongodb-memory-server), and write cases, finally global method for get authorized user. See [here](https://github.com/jinyongnan810/js-microservices-ticketing/commit/e264c9d36e79902b90cd1b0c01a107f1c52dbcb7). \n\n#### Step 6: Auth Front-end\n##### Next.js Flows\n* The basic [Next.js setup](https://github.com/jinyongnan810/js-microservices-ticketing/commit/930227efdc7abf72880a6c125bb0926155d498f7)\n* Create [custom hook](https://github.com/jinyongnan810/js-microservices-ticketing/commit/3b1c0742f5a234c0f53dff991b9febe044445eab) to throw request and handle errors\n* Next.js [server side accesses Auth](https://github.com/jinyongnan810/js-microservices-ticketing/commit/589340f83e92dd8347093cd48fc252c3af1c518e) Service to get current user\n* Create [generic Axios instance](https://github.com/jinyongnan810/js-microservices-ticketing/commit/323c312e0762ea14c7216573b7c40e1870fd9ff9)\n* [Common page](https://github.com/jinyongnan810/js-microservices-ticketing/commit/cb029424b8a69099aa2e330b63c568c7e80a8b91)\n* [Move common action to AppComponent](https://github.com/jinyongnan810/js-microservices-ticketing/commit/f94bdd4c1aa5b6ff01b58b4ca289d20b87331af5)\n* [Set common header in AppComponent](https://github.com/jinyongnan810/js-microservices-ticketing/commit/4e8289ea75bf09f521f845c9331f4b9a315d6207)\n\n#### Step 7: Share code between services\n##### Flow of creating a npm repository\n* npm -> [add organization](https://www.npmjs.com/settings/jinyongnan810/members)\n* Create git repository, set Package.json name, then\n``` bash\nnpm login\nnpm publish --access public\n```\n* [Move common functions](https://github.com/jinyongnan810/js-microservices-ticketing/commit/4a0bfb262cb7e3e98a7ce26e83418bffbe1110d5) to [the common npm repository](https://github.com/jinyongnan810/js-microservice-ticketing-common)\n*** \n\n#### Step 8: Create [Tickets Service](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/tickets)\n##### Purpose\n* Create basically a CRUD service for tickets.\n##### [Test-first fLows](https://github.com/jinyongnan810/js-microservices-ticketing/commits/master/tickets)\n* Create a jest test\n* Create a route\n* Then create next jest test\n***\n\n#### Step 9: Set up NATS stream server\n* [NATS deployment](https://github.com/jinyongnan810/js-microservices-ticketing/commit/36f90f26d86e60e5ef610884e7fb1fa388bde5ba)\n* Template of using NATS: [Publisher](https://github.com/jinyongnan810/js-microservices-ticketing/blob/master/nats-test/src/publisher.ts) and [Listener](https://github.com/jinyongnan810/js-microservices-ticketing/blob/master/nats-test/src/listener.ts)\n* Extract common things about [publisher](https://github.com/jinyongnan810/js-microservices-ticketing/commit/e6ed2a712e5029695887fad1373f567e72e0e392) and [listener](https://github.com/jinyongnan810/js-microservices-ticketing/commit/c832a8384643a624a418bc5edf5b497ef9b28af0)\n* [Update common library](https://github.com/jinyongnan810/js-microservice-ticketing-common/commit/600e366cf2ce6505e66e719ba1a62b73d6c4b662)\n***\n\n\n#### Step 10: Use NATS to publish events\n* [Exporting NATS client](https://github.com/jinyongnan810/js-microservices-ticketing/commit/7b9f43852ab9f69ae725e3f19f6b32b0d0e98212) and [using pulisher](https://github.com/jinyongnan810/js-microservices-ticketing/commit/3eff4f213b5e37438cdcaa3a9e21cf27ad7e0a8e) to publish actual events\n* Gracefully [close NATS connection](https://github.com/jinyongnan810/js-microservices-ticketing/commit/af026940a08abc962789f3994dd58125bb719c8a)\n* Fix Unit Tests using [jest mocks](https://github.com/jinyongnan810/js-microservices-ticketing/commit/06aafed9509d3a9b05bd6ef2deb509f52479bd9b)\n* Put NATS info into [envs](https://github.com/jinyongnan810/js-microservices-ticketing/commit/0647d198414d12607f34cadae518620580d5b252)\n***\n\n\n#### Step 11: [Order Service](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/orders)\n* Order service [models](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/orders/src/models)(and enum defination)\n* Implement [Optimistic Concurrency Control](https://github.com/jinyongnan810/js-microservices-ticketing/commit/c5ff60155193c183b2d2ac6bddab628e77e99eab) with mongoose-update-if-current\n* [Listen](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/orders/src/events/listeners) for ticket service events and save ticket info\n* [Publish](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/orders/src/events/publishers) order events to lock tickets\n***\n\n\n\n#### Step 12: [Expiration Service](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/expiration)\n* [Listen](https://github.com/jinyongnan810/js-microservices-ticketing/blob/master/expiration/src/events/listeners/order-created-listener.ts) for the Order-Created Event and [publish](https://github.com/jinyongnan810/js-microservices-ticketing/blob/master/expiration/src/events/publishers/expiration-complete-publisher.ts) a Expiration-Complete Event after some time. \n* Delay some time using [Redis and Bull](https://github.com/jinyongnan810/js-microservices-ticketing/commit/9e2133947863ed8e5d07d0d42f672ca48cb448d7)\n***\n\n\n#### Step 13: [Payment Service](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/payments)\n* Listen for order events\n* [Use stripe](https://github.com/jinyongnan810/js-microservices-ticketing/commit/4f5f00f1367f5220fb2ae89011b9b89e5041df39) to charge an order\n* Publish payment created event\n***\n\n\n#### Step 14: Frontend\n* [Stripe frontend form](https://github.com/jinyongnan810/js-microservices-ticketing/commit/f5657130c0e6b399959d8f929ceb2d138dfef8f9), and using testing [credit card info](https://stripe.com/docs/testing)\n***\n\n#### Step 15: Deployment to Digital Ocean\n* Create Cluster with defaults\n* Install doctl ---> for debugging\n* * In website -> API -> Create new token\n* * doctl auth init\n* * doctl kubernetes cluster kubeconfig save ticketing(the cluster name)  ---> now k8s context is switched to digital ocean\n* Create Github action\n* * [Actions on push](https://github.com/jinyongnan810/js-microservices-ticketing/tree/master/.github/workflows)\n* * Create github secret\n* Create k8s secrets and use Ingress-nginx(need [checked](https://kubernetes.github.io/ingress-nginx/deploy/#digital-ocean))\n```bash\n# secrets\nkubectl create secret generic jwt-secret --from-literal JWT_KEY=kjsjfksldjfsfsl\nkubectl create secret generic stripe-secret --from-literal STRIPE_KEY=kjsjfksldjfsfsl\n# ingress-nginx\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.40.2/deploy/static/provider/cloud/deploy.yaml\n```\n* Get a domain name and replace ingress-srv.yml file's domain name\n* * Namecheap set custom DNS:`ns1.digitalocean.com`,`ns2.digitalocean.com`,`ns3.digitalocean.com`\n* * Digital Ocean Network->Domains->enter and add domain-> add A record `@:load-balancer-name:30s`-> add CNAME record `www:@:30s`\n* [Small fixes](https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/20144736#overview)\n\n***\n### Small Tricks\n#### Handling CORS in Express apps\n~~~~ javascript\nnpm install cors\nconst cors = require(\"cors\");\napp.use(cors());\n~~~~ \n#### Restart Pod when changes didn't get reflected\n``` bash\nkubectl get pods\nkubectl delete pod xxx\n```\n\n",
    createdAt: { $date: { $numberLong: "1604106160019" } },
    updatedAt: { $date: { $numberLong: "1614063085456" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "601dde37cd280b00176e1e31" },
    title: "Micro-Frontend",
    content:
      "## Micro Frontend\n### Demo\n* [Basic webpack](https://github.com/jinyongnan810/micro-frontend-demo/commit/9e14494a7a57b1c0f54af8a0f6f696c6202c35f9)\n* [Glue frontend together](https://github.com/jinyongnan810/micro-frontend-demo/commit/cae0e83ba5f6ea763f201a6d318eb1f6cf0047de)\n***\n\n### Dashboard\n* [Packages](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/a4d3f27d8d98344690a725a96490f96835a747ed)\n\n#### Sub1-[Marketing](https://github.com/jinyongnan810/micro-frontend-dashboard/tree/master/marketing)\n* [Basic Setup](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/1b023fcd93871c86cac8fe4571fec0f17aa2ec98)\n* [Some Component with react and material](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/a92fa20d49e9c29bc9c25a69793f7dca58fda3cc),and [combine react](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/ee8f4ffa8660c3ace18db7ed6ed6fa7effa07bb6)\n\n#### [Container](https://github.com/jinyongnan810/micro-frontend-dashboard/tree/master/container)\n* [Federate with the sub](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/109bfee845cb7736adc11d8a35d6217d601603be) using [useRef](https://github.com/jinyongnan810/micro-frontend-dashboard/blob/master/container/src/components/MarketingApp.js)\n* [Avoid css class name conflicts](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/e18af9abb2d175f45bc6c67159b4225ece28c5db) \n\n\n#### Deploy to AWS S3\n* [Make production build](https://github.com/jinyongnan810/micro-frontend-dashboard/blob/master/container/config/webpack.prod.js)\n* Create S3 Bucket(set bucket name, select region)\n* Config \n* * properties->enable static website hosting\n* * permissions->disable block public access\n* * permissions->bucket policy->policy generator->fill in(ARN is at previous page)->add statement->generate policy\n![s3 bucket policy](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1613797174/qsd7vtdcrsc4ktamydq9.png)\n* Create Cloudfront service\n* * Fill origin domain name\n* * Check Redirect Http to Https\n* * Create\n* * Enter distribution\n* * General->Edit->Fill Default Root Object(/container/latest/index.html)\n* * Error Pages->Create->![Error Response](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1613803000/olozrufem4cyvos2idmq.png)\n* Create env variables(IAM)\n* * Users->Add User->Fill name and check programmatic access\n* * ->Permissions->Attaching existing policies->s3fullaccess&cloudfrontfullaccess\n* * ->skip next 2 pages and create user\n* * ->github->settings->secrets->new secret->create 3 secrets needed in [github action file](https://github.com/jinyongnan810/micro-frontend-dashboard/blob/master/.github/workflows/container.yml)\n* * Run workflow\n* Cloudfront set always get latest version of files\n* * Invalidation->create invalidation->add /container/latest/index.html\n* * OR [use aws CLI](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/aaf98ee341a5704e119df34dc3172d6274f7ef38)\n\n#### Router\n* History->access the path.\n* Different history->Browser(check browser url),Hash(check browser hash),Memory(only in memory)\n* Routing policy->Parent uses Broswer history(which provided by BrowserRouter), Child [uses Memory history](https://github.com/jinyongnan810/micro-frontend-dashboard/blob/master/marketing/src/bootstrap.js).\n* Parent and Child sync history [back](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/2f0663aa371aa0a11f0ccf2bbc77757de5cb5071) and [forth](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/7e75a346d42e7003a5399b3eb73294c230029326)\n* [Add initialPath to memory history](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/8b140e18aea67686d840cf83cf6e47a5623b881f)\n* [Lazy-loading and progress bar](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/afd672ec000db1f0868f876991d063987a59c467)\n\n#### Sub2-Auth\n* [Signin properties pass around with parent](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/7c2c73e4714c5cd9df28b4a391ce0be2c8f79e2e)\n\n#### Sub3-Dashboard\n* [Vue component mount](https://github.com/jinyongnan810/micro-frontend-dashboard/blob/master/dashboard/config/webpack.common.js)\n* [Protected Route](https://github.com/jinyongnan810/micro-frontend-dashboard/commit/88fd69bc72e63370ebf0c8fc39704c427460a4ba)\n\n\n\n\n***",
    createdAt: { $date: { $numberLong: "1612570167065" } },
    updatedAt: { $date: { $numberLong: "1614469834339" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "603d7b60b707c50017dac0c0" },
    title: "GraphQL",
    content:
      "## GraphQL\n### [Demo](https://github.com/jinyongnan810/graphql-demo)\n* [First query](https://github.com/jinyongnan810/graphql-demo/commit/6e286a2469fec2a65dfe852feca75a329730e325)\n![graphql](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1614642107/oyblltgr9mp9oix5qjog.png)\n* [Get User with company](https://github.com/jinyongnan810/graphql-demo/commit/521dada45946455318a57c1510aafadee96d33ca)\n* [Get Company with users](https://github.com/jinyongnan810/graphql-demo/commit/789bc818f9185e0d79c40b06453298d0193771cf)\n* Fragments, alias, naming\n![framents](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1614900264/yswm1k2c2mrv9f6hxwgg.png)\n* Mutations\n* * [Add User](https://github.com/jinyongnan810/graphql-demo/commit/e1999fa3d580dd66ed8eeb1fc0ad0f114d80f2ee)\n![mutation](https://res.cloudinary.com/dsiz9ikkt/image/upload/v1614902465/vb5aorg6wrlse61w4x6s.png)\n\n***\n### [Frontend demo](https://github.com/jinyongnan810/graghql-frontend-demo)\n* [query sample](https://github.com/jinyongnan810/graghql-frontend-demo/commit/e835d0eefdefbf9c6b24cbbe9ea9f21d0de1c46d)\n* [mutation sample](https://github.com/jinyongnan810/graghql-frontend-demo/commit/ca3e380745cc479870d8971c1476f40974509533)\n* [prevent warm cache](https://github.com/jinyongnan810/graghql-frontend-demo/commit/9cd8d45176b6cfe8d16c03d0a8eb15882b295355)\n* [delete](https://github.com/jinyongnan810/graghql-frontend-demo/commit/757c4b8e96ee63da46a14a7c39b52ab720a47216) and [display](https://github.com/jinyongnan810/graghql-frontend-demo/commit/b1bfd94e48fd00d7d0fbb849d12f621cf936f3bf)\n* [Declare Id field](https://github.com/jinyongnan810/graghql-frontend-demo/commit/b6b7c95cad9f1d34e7f8f034fe959674664f9f5e) to help cache\n* [Optimistic Response](https://github.com/jinyongnan810/graghql-frontend-demo/commit/09937db24ef839d9e009a59ef7d4bfaad07089f9)\n\n\n***\n### [Full-Stack Demo](https://github.com/jinyongnan810/graphql-fullstack)\n* Authentication mutations [backend](https://github.com/jinyongnan810/graphql-fullstack/blob/master/backend/src/schemas/mutations/Mutation.ts) and [frontend](https://github.com/jinyongnan810/graphql-fullstack/blob/master/frontend/src/components/Signin.tsx)\n* Frontend [graphql include cookie](https://github.com/jinyongnan810/graphql-fullstack/blob/master/frontend/src/App.tsx)\n* [Private route HOC](https://github.com/jinyongnan810/graphql-fullstack/commit/51943cddb8ef526a3655f4a43bfc656d5ebb5464)(Higher Order Component)",
    createdAt: { $date: { $numberLong: "1614642016754" } },
    updatedAt: { $date: { $numberLong: "1616551968862" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "605a7edded5fdd0017b05a2b" },
    title: "Electron-Explore",
    content:
      "## Exploring Electron\n### Check Points\n- [x] Basic Electron + Typescript + React setup\n- [ ] Build the exe\n- [x] React redux\n- [x] Backend server with authentication\n- [ ] WebRTC",
    createdAt: { $date: { $numberLong: "1616543453350" } },
    updatedAt: { $date: { $numberLong: "1617686489784" } },
    __v: { $numberInt: "0" },
  },
  {
    _id: { $oid: "607f855d11b45e0017d64f5a" },
    title: "WebRTC",
    content:
      "## WebRTC Related\n\n###  [Typescript-Express meeting app](https://github.com/jinyongnan810/electron-react-typescript-demo)\n* Authenticated WebSockets\n* WebRTC Mesh\n\n### pion go WebRTC SFU server [try out](https://github.com/jinyongnan810/webrtc-pion-sfu-server)\n\n### [Some other SFU servers](https://ourcodeworld.com/articles/read/1212/top-5-best-open-source-webrtc-media-server-projects) to be tried out\n",
    createdAt: { $date: { $numberLong: "1618969949400" } },
    updatedAt: { $date: { $numberLong: "1618970340641" } },
    __v: { $numberInt: "0" },
  },
];

import express, { Request, Response } from "express";
import { currentUser } from "../middlewares/current-user";
import { requireAuth } from "../middlewares/require-auth";
import { Memo } from "../models/memo";
import { User } from "../models/user";
const router = express.Router();
router.post(
  "/api/transfer",
  currentUser,
  requireAuth,
  async (req: Request, res: Response) => {
    data.forEach(async (d) => {
      const user = await User.findById(req.currentUser!.id);
      const newMemo = Memo.build({
        title: d.title,
        content: d.content,
        user: user!,
      });
      await newMemo.save();
    });
    res.send({});
  }
);
export default router;
